version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: developerstore-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: developerstore_sales_dev
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: developerstore-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  sales.api:
    build:
      context: .
      dockerfile: src/Sales/Sales.Api/Dockerfile
    container_name: developerstore-sales-api
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      # Override connection string to use the Docker network hostnames
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=developerstore_sales_dev;Username=postgres;Password=postgres
      RabbitMq__ConnectionString: amqp://guest:guest@rabbitmq:5672
      Jwt__SecretKey: supersecret_dev_key_please_change
      # optional: configure Kestrel to listen on 8080 inside container (Dockerfile already sets ASPNETCORE_URLS)
    ports:
      - "8081:8080"

  auth.api:
    build:
      context: .
      dockerfile: src/Auth/Auth.Api/Dockerfile
    container_name: developerstore-auth-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      Jwt__SecretKey: supersecret_dev_key_please_change
    ports:
      - "8082:8080"

volumes:
  pgdata: